// <auto-generated />
using System;
using Database.AuthDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.AuthDb.Migrations
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250911120626_v1_0_0_0")]
    partial class v1_0_0_0
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsInternal")
                        .HasColumnType("bit")
                        .HasColumnName("is_internal")
                        .HasColumnOrder(6);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("key")
                        .HasColumnOrder(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("secret")
                        .HasColumnOrder(4);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.Property<int>("WrongLoginAttemptsCounter")
                        .HasColumnType("int")
                        .HasColumnName("wrong_login_attempts_counter")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("client", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.ClientRight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanNotifyParty")
                        .HasColumnType("bit")
                        .HasColumnName("can_notify_party")
                        .HasColumnOrder(3);

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_right", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.ClientStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id")
                        .HasColumnOrder(2);

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note")
                        .HasColumnOrder(5);

                    b.Property<int>("Reason")
                        .HasColumnType("int")
                        .HasColumnName("reason")
                        .HasColumnOrder(4);

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .IsUnique();

                    b.ToTable("client_status", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.ClientSubscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClientId")
                        .HasColumnType("bigint")
                        .HasColumnName("client_id")
                        .HasColumnOrder(2);

                    b.Property<long>("SubscriptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("subscription_id")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("client_subscription", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Document", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Checksum")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("checksum")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name")
                        .HasColumnOrder(3);

                    b.Property<DateTime>("SignTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("sign_timestamp")
                        .HasColumnOrder(2);

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type")
                        .HasColumnOrder(5);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.ToTable("document", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Login", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_login_timestamp")
                        .HasColumnOrder(4);

                    b.Property<string>("LastLoginIpAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("last_login_ip_address")
                        .HasColumnOrder(5);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.Property<int>("WrongLoginAttemptsCounter")
                        .HasColumnType("int")
                        .HasColumnName("wrong_login_attempts_counter")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("login", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Subscription", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("contract_id")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("CreateTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("create_timestamp")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("subscription", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email")
                        .HasColumnOrder(7);

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .IsUnicode(false)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("external_id")
                        .HasColumnOrder(2);

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("is_verified")
                        .HasColumnOrder(8);

                    b.Property<string>("OtpSecret")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("otp_secret")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("RegistrationTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("registration_timestamp")
                        .HasColumnOrder(9);

                    b.Property<int>("Role")
                        .HasColumnType("int")
                        .HasColumnName("role")
                        .HasColumnOrder(5);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("username")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("user", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.UserPassword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("LastChangedTimestamp")
                        .HasColumnType("datetime2")
                        .HasColumnName("last_changed_timestamp")
                        .HasColumnOrder(5);

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("secret")
                        .HasColumnOrder(4);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false)
                        .HasColumnType("varchar(256)")
                        .HasColumnName("password")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_password", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.UserStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("note")
                        .HasColumnOrder(5);

                    b.Property<int>("Reason")
                        .HasColumnType("int")
                        .HasColumnName("reason")
                        .HasColumnOrder(4);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<int>("Value")
                        .HasColumnType("int")
                        .HasColumnName("status")
                        .HasColumnOrder(3);

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("version")
                        .HasColumnOrder(1);

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_status", "dbo");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.ClientRight", b =>
                {
                    b.HasOne("Database.AuthDb.DefaultSchema.Client", "Client")
                        .WithOne("Right")
                        .HasForeignKey("Database.AuthDb.DefaultSchema.ClientRight", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.ClientStatus", b =>
                {
                    b.HasOne("Database.AuthDb.DefaultSchema.Client", "Client")
                        .WithOne("Status")
                        .HasForeignKey("Database.AuthDb.DefaultSchema.ClientStatus", "ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.ClientSubscription", b =>
                {
                    b.HasOne("Database.AuthDb.DefaultSchema.Client", "Client")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.AuthDb.DefaultSchema.Subscription", "Subscription")
                        .WithMany("ClientSubscriptions")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Login", b =>
                {
                    b.HasOne("Database.AuthDb.DefaultSchema.User", "User")
                        .WithOne("Login")
                        .HasForeignKey("Database.AuthDb.DefaultSchema.Login", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Subscription", b =>
                {
                    b.HasOne("Database.AuthDb.DefaultSchema.Document", "Contract")
                        .WithOne("Subscription")
                        .HasForeignKey("Database.AuthDb.DefaultSchema.Subscription", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.UserPassword", b =>
                {
                    b.HasOne("Database.AuthDb.DefaultSchema.User", "User")
                        .WithOne("Password")
                        .HasForeignKey("Database.AuthDb.DefaultSchema.UserPassword", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.UserStatus", b =>
                {
                    b.HasOne("Database.AuthDb.DefaultSchema.User", "User")
                        .WithOne("Status")
                        .HasForeignKey("Database.AuthDb.DefaultSchema.UserStatus", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Client", b =>
                {
                    b.Navigation("Right");

                    b.Navigation("Status");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Document", b =>
                {
                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.Subscription", b =>
                {
                    b.Navigation("ClientSubscriptions");
                });

            modelBuilder.Entity("Database.AuthDb.DefaultSchema.User", b =>
                {
                    b.Navigation("Login");

                    b.Navigation("Password");

                    b.Navigation("Status");
                });
#pragma warning restore 612, 618
        }
    }
}
